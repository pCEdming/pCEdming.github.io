<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Whiting互联网边缘の小屋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-05T13:41:52.405Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Whiting</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP提供的可靠数据传输服务</title>
    <link href="http://example.com/2023/10/05/TCP%E6%8F%90%E4%BE%9B%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2023/10/05/TCP%E6%8F%90%E4%BE%9B%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1/</id>
    <published>2023-10-05T12:59:17.000Z</published>
    <updated>2023-10-05T13:41:52.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tcp提供的可靠数据传输服务"><a class="markdownIt-Anchor" href="#tcp提供的可靠数据传输服务">#</a> TCP 提供的可靠数据传输服务</h1><blockquote><p>在网络层服务，即 IP 服务，它不保证数据报能否交付，是否按次序交付，也不保证数据报中的数据的完整性</p></blockquote><p>TCP 在 IP 这种不可靠的服务之上建立了一种可靠数据传输服务。该服务确保一个进程从其接收缓存中读出的数据流是无损坏、无间隙、非冗余、按次序的数据流.</p><p><strong>根据 TCP 的一个高度简化的描述中:</strong></p><ol><li>从上层应用中接收数据</li><li>定时器超时</li><li>收到 ACK</li></ol><div class="story post-story"><h2 id="tcp在发送方的过程"><a class="markdownIt-Anchor" href="#tcp在发送方的过程">#</a> TCP 在发送方的过程</h2><ol><li>首先从上层应用程序中接收数据，生成有序列的报文段，当前 <mark>如果定时器未启动</mark> 则启动定时器，然后发送报文段.</li><li>定时器超时，这重传最小序列且未确定的报文段，之后启动定时器.</li><li>接收到对方的 ACK 报文，如果 ACK 号等于或大于发送方窗口中的最大序列号，则认为窗口中的所有报文都收到，关闭定时器，继续接收新数据.</li></ol><blockquote><p>这里有值得注意的一点：关于序号和确认号。序号就是报文段数据字段首字节的序号，确认号就是主机等待接收的数据的下一个序号.</p></blockquote><p><strong>上述过程有集中情况:</strong></p><ol><li>发送方发送的数据被接收方确认，但是接收放发送的确认丢失，这种情况发送方会重传该数据.</li><li>发送方连续发送了两个报文段，也被接收方确认，但是在确认的时候第一个数据超时了，这时候发送方会重发第一个数据，并重新启动定时器，但也就是这时候，第二个数据的确认号被发送方接收，因为第二个确认号是在新的超时发生之前到达的，则不会重发第二个报文段.</li><li>和第二种情况类似，只不过是第一个报文段的确认号在途中丢失，第二个报文段的确认号照常接收，此时会认为在第二个报文段之前的所有报文段都被接收，则不会重发第一个报文段.</li></ol></div><div class="story post-story"><h2 id="值得关注的事情"><a class="markdownIt-Anchor" href="#值得关注的事情">#</a> 值得关注的事情</h2><ul><li><p>超时间隔</p><p>很容易发现，每次重传的时候都会重启定时器，本来 x 的超时间隔就会变成 2x, 依次类推这个超时间隔是呈指数型增长！！！</p></li><li><p>快速重传</p><p>之前有看过<mark>回退 N 步</mark>和<mark>选择重传</mark>.<br>TCP 的发送方仅仅维护一个要确认的最小序列和要发送的下一个序列，但是和回退 N 步不同的是：TCP 会将失序的序号缓存.<br> 同时 TCP 不像选择重传那样累计的接收最后一个正确的有序报文段，而是可以选择的接收失序报文段.<br> 所以更像是两者的混合体.</p></li></ul></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tcp提供的可靠数据传输服务&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tcp提供的可靠数据传输服务&quot;&gt;#&lt;/a&gt; TCP 提供的可靠数据传输服务&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在网络层服务，即 IP 服务，它不保证数据</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="TCP协议" scheme="http://example.com/tags/TCP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络概论</title>
    <link href="http://example.com/2023/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA/"/>
    <id>http://example.com/2023/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA/</id>
    <published>2023-10-03T14:02:28.000Z</published>
    <updated>2023-10-03T14:06:14.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络自顶向下"><a class="markdownIt-Anchor" href="#计算机网络自顶向下">#</a> 计算机网络：自顶向下</h1><div class="story post-story"><h2 id="因特网"><a class="markdownIt-Anchor" href="#因特网">#</a> 因特网</h2><p><strong>因特网就是计算机网络的概称</strong> 通俗来讲就是 “网络的网络”</p><h3 id="因特网的构成"><a class="markdownIt-Anchor" href="#因特网的构成">#</a> 因特网的构成</h3><ul><li>端系统或主机</li><li>通信链路</li><li>因特网服务提供商 (ISP)<br> 以上结构都要运行多个 [[协议]], 其中最为重要的协议就是<strong> TCP/IP</strong> 两个</li></ul></div><div class="story post-story"><h2 id="网络边缘"><a class="markdownIt-Anchor" href="#网络边缘">#</a> 网络边缘</h2><p>我们通常把与因特网相连的计算机成为端系统，它们位于网络边缘</p><h3 id="接入网"><a class="markdownIt-Anchor" href="#接入网">#</a> 接入网</h3><ul><li>家庭接入：DSL、电缆、 FTTH 和 5G 固定式无线</li><li>企业接入：以太网和 Wi-Fi</li><li>广域无线接入：3G、4G</li></ul><h3 id="物理媒介"><a class="markdownIt-Anchor" href="#物理媒介">#</a> 物理媒介</h3><ul><li>双绞铜线</li><li>同轴电缆</li><li>光纤</li><li>陆地无线电信道</li><li>卫星无线电信道</li></ul></div><div class="story post-story"><h2 id="网络核心"><a class="markdownIt-Anchor" href="#网络核心">#</a> 网络核心</h2><ul><li>分组交换<ol><li>存储转发传输</li><li>排队时延和分组丢失</li><li>转发表和路由选择协议</li></ol></li><li>电路交换<br>电路交换网络中的复用</li><li>分组交换和电路交换的对比<br>在我看来：分组交换的性能好、电路交换的安全性高</li></ul></div><div class="story post-story"><h2 id="分组交换网的时延-丢包和吞吐量"><a class="markdownIt-Anchor" href="#分组交换网的时延-丢包和吞吐量">#</a> 分组交换网的时延、丢包和吞吐量</h2><h3 id="分组交换中的时延类型"><a class="markdownIt-Anchor" href="#分组交换中的时延类型">#</a> 分组交换中的时延类型</h3><ul><li>处理时延</li><li>排队时延</li><li>传输时延</li><li>传播时延</li></ul><h3 id="丢包"><a class="markdownIt-Anchor" href="#丢包">#</a> 丢包</h3><p>丢包类比一辆长的车队途径检查点</p><h3 id="吞吐量"><a class="markdownIt-Anchor" href="#吞吐量">#</a> 吞吐量</h3><p>吞吐量近似的认为是源与目的地之间路径的最小传输速率</p></div><div class="story post-story"><h2 id="协议层次及其服务模型"><a class="markdownIt-Anchor" href="#协议层次及其服务模型">#</a> 协议层次及其服务模型</h2><h3 id="协议分层"><a class="markdownIt-Anchor" href="#协议分层">#</a> 协议分层</h3><ul><li>应用层</li><li>运输层</li><li>网络层</li><li>链路层</li><li>物理层</li></ul><h1 id="运输层"><a class="markdownIt-Anchor" href="#运输层">#</a> 运输层</h1></div><div class="story post-story"><h2 id="运输层概述"><a class="markdownIt-Anchor" href="#运输层概述">#</a> 运输层概述</h2><p>运输层主要是负责应用层和网络层之间的通信，<mark> 逻辑通信</mark>并不是真实的，是通过应用层发送的<mark>报文段</mark>实现的，在运输层我们主要学习的是<mark> UDP (User Datagram Protocol) 和 TCP (Transmission Control Protocol)</mark></p></div><div class="story post-story"><h2 id="多路复用和多路分解"><a class="markdownIt-Anchor" href="#多路复用和多路分解">#</a> 多路复用和多路分解</h2><p>这个说白了就是：在应用层和运输层之间的通信都会经过一个套接字，即接口。从网络层来的报文段来到了运输层，现在要运输到应用层，那么就会通过报文段里的一个信息发送到应用层某个应用程序的套接字当中，然后从众多应用程序发送下来的报文段都被打包经运输层发送到网络层，这是多路复用</p></div><div class="story post-story"><h2 id="udp无连接运输"><a class="markdownIt-Anchor" href="#udp无连接运输">#</a> UDP: 无连接运输</h2><p>UPD 是无连接的，因为在发送报文段之前，发送端与接受段并没有握手🤝,UPD 是个二元连接，在 UDP 的报文段结构中得有源端口号和目的端口号，其目的是为了有目标，和到达目标后方便回复<br> UDP 是不可靠的，它允许一部分的数据丢失，比如视频通话，被丢包和超时并不需要再次发送，因为这个在视频通话当中是没必要的，虽然说 UDP 是不可靠的，但我感觉还是有一点的，就是检验和，实现了 UDP 是差错检测功能，但好像也没啥用，检测出来差错之后并没有纠正… 文中有说 Google 通过某项技术实现了 UDP 上的可靠传输，这是后话了，以后再说</p></div><div class="story post-story"><h2 id="面向连接的tcp"><a class="markdownIt-Anchor" href="#面向连接的tcp">#</a> 面向连接的 TCP</h2><p>一个可靠的连接需要考虑的因素非常多，书中也是循循渐进的考虑的，我这里就不过来论述了，都是一个不断改进的过程，其中有:</p><ol><li>通过检验和能检测出传输中的比特错误</li><li>运输层的报文段一般是分段的，那么为每段报文段添加一个序号就好知道哪段丢了</li><li>如果电话那边说的话非常快，接收方没听到，那么就请求再说一遍，如果接受到了那么就确认一下</li><li>最后就是回退 N 步和选择重传</li></ol></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络自顶向下&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机网络自顶向下&quot;&gt;#&lt;/a&gt; 计算机网络：自顶向下&lt;/h1&gt;
&lt;div class=&quot;story post-story&quot;&gt;&lt;h2 id=&quot;因特网&quot;&gt;&lt;a class=</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="概论" scheme="http://example.com/tags/%E6%A6%82%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>高精度</title>
    <link href="http://example.com/2023/10/03/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    <id>http://example.com/2023/10/03/%E9%AB%98%E7%B2%BE%E5%BA%A6/</id>
    <published>2023-10-03T13:57:29.000Z</published>
    <updated>2023-10-03T13:58:48.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高精度"><a class="markdownIt-Anchor" href="#高精度">#</a> 高精度</h1><p>高精度算法是用 python 或 Java 是很简单的，这俩好像自带大数操作 (恼</p><p>但是我们是 C++ 选手，还是按部就班来～</p><p>高精度一般是有<mark>加法、减法、乘法、除法</mark><br>乘法和除法一般是大数和小数</p><p>其本质就是<strong>使用数组模拟我们人类的计算过程</strong></p><div class="story post-story"><h2 id="高精度加法"><a class="markdownIt-Anchor" href="#高精度加法">#</a> 高精度加法</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 进位</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="高精度减法"><a class="markdownIt-Anchor" href="#高精度减法">#</a> 高精度减法</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sub</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        t <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">-=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">else</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> C<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="高精度乘法高-x-低"><a class="markdownIt-Anchor" href="#高精度乘法高-x-低">#</a> 高精度乘法 (高 x 低)</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        t <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="高精度除法高-低"><a class="markdownIt-Anchor" href="#高精度除法高-低">#</a> 高精度除法 (高 / 低)</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">div</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span><span class="token keyword">int</span> B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        r <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        r <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">reverse</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>C<span class="token punctuation">,</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高精度&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#高精度&quot;&gt;#&lt;/a&gt; 高精度&lt;/h1&gt;
&lt;p&gt;高精度算法是用 python 或 Java 是很简单的，这俩好像自带大数操作 (恼&lt;/p&gt;
&lt;p&gt;但是我们是 C++ 选手，还是按部就班</summary>
      
    
    
    
    <category term="题解" scheme="http://example.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="高精度" scheme="http://example.com/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/10/02/hello-world/"/>
    <id>http://example.com/2023/10/02/hello-world/</id>
    <published>2023-10-02T01:45:28.276Z</published>
    <updated>2023-10-03T14:07:04.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="about"><a class="markdownIt-Anchor" href="#about">#</a> About</h1><div class="story post-story"><h2 id="why"><a class="markdownIt-Anchor" href="#why">#</a> Why</h2><ul><li>这个阶段当然是在网络上看到了好多大佬很炫酷的博客，于是萌生出了自己也搞一个的想法，于是就有了这个，当然这看起来好像不是那么炫酷，这个就等后期慢慢开发了，我目前是这么个水平，当前有在学习计算机网络和前端.</li></ul></div><div class="story post-story"><h2 id="here-is-what"><a class="markdownIt-Anchor" href="#here-is-what">#</a> Here is what</h2><p>这里是一个个人空间，有在学习计算机相关的知识，目前会更新<strong>数据结构与算法、题解、学习心得、考研相关、英语学习</strong></p><h3 id="further"><a class="markdownIt-Anchor" href="#further">#</a> Further</h3><p>鉴于本人正在学习英语，而且应该是有一些虚荣心作祟 (也不好描述，姑且称为虚荣吧) 我感觉全英会显得很高级，所以有些我会逐步写一下全英文章</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;about&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#about&quot;&gt;#&lt;/a&gt; About&lt;/h1&gt;
&lt;div class=&quot;story post-story&quot;&gt;&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;markdownIt-A</summary>
      
    
    
    
    
  </entry>
  
</feed>
